name: Build and Deploy Code

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  job1:
    env:
      DATABASE_HOSTNAME: postgres
      DATABASE_PORT: 5432
      DATABASE_USERNAME: postgres
      DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
      DATABASE_NAME: fastapi_test
      SECRET_KEY: 09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7
      ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_MINUTES: 300
      DATABASE_URL: postgresql://postgres:${{ secrets.DATABASE_PASSWORD }}@postgres:5432/fastapi_test

    runs-on: ubuntu-latest
    timeout-minutes: 300

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          POSTGRES_DB: fastapi_test
        ports:
          - 5433:5432
        options: >-
          --network my_network
          --cpus="1"
          --memory="1g"
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 10s
          --health-retries 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Create Docker network
        run: |
          docker network ls
          docker network create my_network || echo "Network already exists"

      - name: Cache Python packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python version 3.9
        uses: actions/setup-python@v3
        with:
          python-version: "3.9"

      - name: Install all dependencies
        run: pip install -r requirements.txt

      - name: Start PostgreSQL service
        run: |
          docker run -d \
          --name postgres \
          --network my_network \
          -p 5433:5432 \
          -e POSTGRES_USER=postgres \
          -e POSTGRES_PASSWORD=${{ secrets.DATABASE_PASSWORD }} \
          -e POSTGRES_DB=fastapi_test \
          --cpus="1" \
          --memory="1g" \
          --health-cmd "pg_isready -U postgres" \
          --health-interval 10s \
          --health-timeout 10s \
          --health-retries 10 \
          postgres:13

      - name: Update pip
        run: python -m pip install --upgrade pip

      - name: Install PostgreSQL client
        run: sudo apt-get install -y postgresql-client

      - name: Set up PostgreSQL password file
        run: |
          echo "127.0.0.1:5432:*:postgres:${{ secrets.DATABASE_PASSWORD }}" > ~/.pgpass
          chmod 0600 ~/.pgpass

      - name: Create fastapi_test database
        run: |
          until pg_isready -h postgres -p 5432 -U postgres; do
            echo "Waiting for PostgreSQL to be ready..."
            sleep 3
          done
          psql -h postgres -U postgres -c "CREATE DATABASE ${DATABASE_NAME};"

      - name: Test with pytest
        run: |
          pip install pytest
          pytest --disable-warnings -q

      - name: Display PostgreSQL container logs
        run: docker logs $(docker ps -a -q --filter "name=postgres")

      - name: Check PostgreSQL status
        run: docker ps -a

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and push Docker image
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: .Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/fastapi:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,src=/tmp/.buildx-cache

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

      - name: Check existing Docker networks
        run: docker network ls